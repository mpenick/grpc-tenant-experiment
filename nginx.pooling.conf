user nginx;
error_log /dev/stdout info;
load_module /usr/lib/nginx/modules/ndk_http_module.so;
load_module /usr/lib/nginx/modules/ngx_http_lua_module.so;

events{
  worker_connections 10;
}
pid /tmp/nginx.pid;
worker_processes auto;
worker_cpu_affinity auto;
pcre_jit on;

http {
  init_worker_by_lua_block {
    dns_client = require("client")
    dns_client.init({nameservers = {"127.0.0.1"}, validTtl=10})
  }

  lua_package_path "/etc/nginx/?.lua;/etc/nginx/lua/?.lua;/etc/nginx/lua/pl/?.lua;/etc/nginx/lua/balancer/?.lua;;";

  upstream grpcservers {
    server 0.0.0.0; # Not valid
    balancer_by_lua_block {
      local balancer = require "ngx.balancer"
        local host = ngx.ctx.hosts
        local port = 8090
        local ok, err = balancer.set_current_peer(host, port)
        if not ok then
          ngx.log(ngx.ERR, "failed to set the current peer: ", err)
            return ngx.exit(500)
            end
    }
    keepalive 1000;
  }

  server {
    listen 8080 default_server;
    location / {
      return 444;
    }
  }

  server {
      listen 8080 http2;
      server_name ~localhost;
 
      location /service. {
        # Check with OPA that the client address is allowed to communicate with this database
        access_by_lua_block {
            -- resolve a gRPC host
            local tenant_id = ngx.req.get_headers()["X-Tenant-ID"]
            local upstream = "coord." .. tenant_id .. ".test"
            local address, err = dns_client.toip(upstream)
            ngx.log(ngx.NOTICE, "using " .. address .. " for tenant " .. tenant_id)
            if not address then
              ngx.log(ngx.ERR, "failed to resolve upstream: ", upstream, err)
              return ngx.exit(500)
            end
            ngx.ctx.hosts = address
        }
        grpc_pass           grpc://grpcservers;
        grpc_set_header     x-tenant-id $http_x_tenant_id;
      }
  }
}
